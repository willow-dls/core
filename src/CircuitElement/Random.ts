/*
 * Copyright (c) 2025 Jordan Bancino <jordan@bancino.net>
 * Copyright (c) 2025 Austin Hargis <hargisa@mail.gvsu.edu>
 * Copyright (c) 2025 Aaron MacDougall <macdouaa@mail.gvsu.edu>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

import { BitString } from "../BitString";
import { CircuitBus } from "../CircuitBus";
import { SequentialElement } from "./SequentialElement";

/**
 * A sequential circuit element that generates a random value on the output
 * line on each rise of the clock signal.
 */
export class Random extends SequentialElement {
  /**
   * Construct a new random circuit.
   * @param maxValue The bus containing the maximum value that will be generated by this circuit.
   * This can change dynamically throughout the circuit's execution.
   * @param clock The clock signal.
   * @param output The bus onto which the random value is output on the clock rise.
   */
  constructor(maxValue: CircuitBus, clock: CircuitBus, output: CircuitBus) {
    super("RandomElement", clock, [maxValue], [output]);
  }

  onResolve(): void {
    const [clock, maxValue] = this.getInputs();
    const [output] = this.getOutputs();

    // If the current value is greater than the max value, reset to zero, regardless of what
    // the clock reads.
    // This is an odd behavior of the CircuitVerse circuit which we reproduce here.
    // My hunch is that their code is doing a check similar to this one to know when to
    // roll the counter over without checking the clock. So we do this before we check the
    // clock.
    if (output.getValue()?.greaterThan(maxValue.getValue())) {
      output.setValue(BitString.low());
    }
  }

  onClockRise(): void {
    const [clock, maxValue] = this.getInputs();
    const [output] = this.getOutputs();

    let rand;

    do {
      // TODO: Could potentially be very inefficient to compute random
      // numbers this way, but it was easy. Should optimize this at some
      // point though.
      rand = BitString.rand(output.getWidth());
    } while (rand.greaterThan(maxValue.getValue()));

    output.setValue(rand);
  }

  onClockFall(): void {}

  // Not sure why you'd want to initialize a random element in this way,
  // but the feature is here anyway.
  initialize(value: BitString): void {
    const [output] = this.getOutputs();
    output.setValue(value);
  }
}
